// api/bot.js
require('dotenv').config(); // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏, –Ω–∞ Render –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
const { Telegraf } = require('telegraf');
const express = require('express'); // –î–æ–±–∞–≤–ª—è–µ–º Express
const axios = require('axios');
const kv = require('../kv'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
const telegram = require('../telegram'); // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.use(express.json()); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram

// --- –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±–æ—Ç–∞ ---

bot.command('start', (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '1 –º–µ—Å—è—Ü - 1600‚ÇΩ', callback_data: 'sub_1' }],
        [{ text: '2 –º–µ—Å—è—Ü–∞ - 2800‚ÇΩ', callback_data: 'sub_2' }],
        [{ text: '3 –º–µ—Å—è—Ü–∞ - 3600‚ÇΩ', callback_data: 'sub_3' }]
      ]
    }
  });
});

bot.command('status', async (ctx) => {
  const userId = ctx.from.id;
  const redisKey = `sub:${userId}`;
  const expiry = await kv.get(redisKey);

  if (!expiry) {
    return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.');
  }

  const expiryDate = new Date(expiry);
  const now = new Date();

  if (now > expiryDate) {
    ctx.reply('‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.');
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
    try {
      await telegram.kickChatMember(process.env.CHANNEL_ID, userId);
      console.log(`User ${userId} kicked from channel ${process.env.CHANNEL_ID}`);
    } catch (error) {
      console.error(`Failed to kick user ${userId}:`, error.message);
    }
    return;
  }

  ctx.reply(`‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ ${expiryDate.toLocaleDateString('ru-RU')}`);
});


bot.action(/sub_(\d+)/, async (ctx) => {
  const userId = ctx.from.id;
  const plan = parseInt(ctx.match[1], 10);

  const prices = { 1: 1600, 2: 2800, 3: 3600 };
  // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const durations = { 1: 10, 2: 60, 3: 70 };

  const amount = prices[plan];
  const durationSec = durations[plan];

  try {
    const payment = await axios.post(
      'https://api.yookassa.ru/v3/payments',
      {
        amount: { value: amount.toFixed(2), currency: 'RUB' },
        capture: true,
        confirmation: {
          type: 'redirect',
          return_url: process.env.YOOKASSA_RETURN_URL
        },
        description: `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${durationSec} —Å–µ–∫.`,
        metadata: {
          user_id: userId,
          durationSec  // –ø–µ—Ä–µ–¥–∞—ë–º –≤ –≤–µ–±—Ö—É–∫ –∏–º–µ–Ω–Ω–æ —Å–µ–∫—É–Ω–¥—ã
        }
      },
      {
        auth: {
          username: process.env.YOOKASSA_SHOP_ID,
          password: process.env.YOOKASSA_SECRET
        },
        headers: {
          'Idempotence-Key': `sub-${userId}-${Date.now()}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const url = payment.data.confirmation.confirmation_url;
    await ctx.reply(`–ü–µ—Ä–µ–π–¥–∏—Ç–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ${url}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', err.response?.data || err.message);
    await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});
// --- –ö–æ–Ω–µ—Ü –≤–∞—à–µ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ –±–æ—Ç–∞ ---

// **–í–∞–∂–Ω–æ –¥–ª—è Render Web Service:**
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram
app.post('/telegram-webhook', async (req, res) => {
  try {
    await bot.handleUpdate(req.body); // Telegraf –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå [Telegram Webhook] Error handling update:', error.message, error.stack);
    res.status(500).send('Internal Server Error');
  }
});

// –ó–∞–ø—É—Å–∫ Express —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000; // Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ process.env.PORT
app.listen(PORT, () => {
  console.log(`üöÄ Telegram Bot Webhook server listening on port ${PORT}`);
});

// –£–¥–∞–ª—è–µ–º bot.launch() –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤–µ–±—Ö—É–∫
// if (process.env.NODE_ENV !== 'production') {
//   bot.launch().catch(console.error);
// }