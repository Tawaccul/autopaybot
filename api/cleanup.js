    // api/cleanup.js
require('dotenv').config();
const kv = require('../kv');
const telegram = require('../telegram');

module.exports = async () => { // –î–ª—è Cron Job –Ω–µ –Ω—É–∂–µ–Ω req, res
  console.log('üßπ [Cleanup] Starting subscription cleanup at:', new Date().toISOString());

  try {
    const keys = await kv.keys('sub:*'); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    console.log(`üßπ [Cleanup] Found ${keys.length} subscription keys.`);

    for (const key of keys) {
      const userId = key.split(':')[1];
      const expiry = await kv.get(key);

      if (!expiry) {
        console.log(`üßπ [Cleanup] No expiry found for ${key}, skipping.`);
        continue;
      }

      const expiryDate = new Date(expiry);
      const now = new Date();

      if (now > expiryDate) {
        console.log(`üßπ [Cleanup] Subscription for user ${userId} expired. Expired on: ${expiryDate.toISOString()}`);
        try {
          // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–∞–Ω–∞–ª–∞
          await telegram.kickChatMember(process.env.CHANNEL_ID, userId);
          console.log(`‚úÖ [Cleanup] User ${userId} kicked from channel ${process.env.CHANNEL_ID}.`);

          // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ Redis
          await kv.del(key);
          console.log(`‚úÖ [Cleanup] Subscription for ${userId} removed from Redis.`);
        } catch (kickError) {
          console.error(`‚ùå [Cleanup] Failed to kick user ${userId} or delete from Redis:`, kickError.message, kickError.stack);
        }
      } else {
        console.log(`üßπ [Cleanup] Subscription for user ${userId} is still active. Expires on: ${expiryDate.toISOString()}`);
      }
    }

    console.log('üßπ [Cleanup] Subscription cleanup completed.');
    // Cron Job –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
  } catch (error) {
    console.error('üî• [Cleanup] UNCAUGHT ERROR during cleanup:', error.message, error.stack);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ª–æ–≥–∏—Ä—É–µ–º –µ–µ
  }
};